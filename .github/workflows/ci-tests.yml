name: CI

on:
  push:
    branches: [ "dev" ]
  pull_request:
    branches: [ "dev" ]

  workflow_dispatch:
    inputs:
      logLevel:
        description: 'Log level'
        required: true
        default: 'warning'
        type: choice
        options:
          - info
          - warning
          - debug
      tags:
        description: 'Test scenario tags'
        required: false
        type: boolean
      environment:
        description: 'Environment to run tests against'
        type: environment
        required: true

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: 3.11

      - name: Set up Environment Variables
        run: |
          touch .env
          cp .env.ci .env  # Copy the example ci .env file to .env (if needed)
          # Ensure the .env file exists in the current directory
          if [ -f .env ]; then
            source .env
          fi

      - name: Use Docker Compose
        uses: isbang/compose-action@v1.5.1
        with:
          compose-file: "./docker-compose.dev.yml"
#          POSTGRES_USER: "admin"
#          POSTGRES_PASSWORD: "asdfgh"
#          DB_USER: "api"
#          DB_USER_PASS: "asdfgh"
#
#          POSTGRES_HOST: "db"
#          POSTGRES_PORT: "5432"
#          POSTGRES_DB: "tracker"
#
#          REDIS_HOST: "redis"
#          REDIS_PORT: "6379"
#          REDIS_DB: "0"
#          REDIS_PASSWORD: "asdfgh"
#          BOT_TOKEN: ${MY_BOT_TOKEN}
#          ADMIN_ID: "1111111111"
#          GROUP_ID: "-1111111111111"
#
#          FORMAT: ''
#          LEVEL: 10

#      - name: Install dependencies
#        run: |
#          pip install -r requirements.txt
#          pip install pytest-cov
#          pip install ruff  # Use ruff for linting
#
#      - name: Set up Docker Compose
#        run: |
#          docker-compose -f ./docker-compose.dev.yml up -d
#
#      - name: Wait for services to start
#        run: |
#          sleep 55
#
#      - name: Run tests and other commands inside containers
#        run: |
#          docker exec -it tgbot pytest --cov=tgbot tgbot/tests/
#
#      - uses: chartboost/ruff-action@v1
#        with:
#          src: "./tgbot"
#          args: --select B
#        run: |
#          ruff . --statistics
#
#      - name: Tear down Docker Compose
#        run: |
#          docker-compose -f ./docker-compose.dev.yml down
# This is a basic workflow to help you get started with Actions

#name: CI
#
## Controls when the workflow will run
#on:
#  # Triggers the workflow on push or pull request events but only for the "main" branch
#  push:
#    branches: [ "dev" ]
#  pull_request:
#    branches: [ "dev" ]
#
#  # Allows you to run this workflow manually from the Actions tab
#  workflow_dispatch:
#
## A workflow run is made up of one or more jobs that can run sequentially or in parallel
#jobs:
#  # This workflow contains a single job called "build"
#  build:
#    # The type of runner that the job will run on
#    runs-on: ubuntu-latest
#
#    # Steps represent a sequence of tasks that will be executed as part of the job
#    steps:
#      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
#      - uses: actions/checkout@v3
#
#      # Runs a single command using the runners shell
#      - name: Run a one-line script
#        run: echo Hello, world!
#
#      # Runs a set of commands using the runners shell
#      - name: Run a multi-line script
#        run: |
#          echo Add other actions to build,
#          echo test, and deploy your project.
#
#      - name: Docker compose tests run
#        # You may pin to the exact commit or the version.
#        # uses: cloudposse/github-action-docker-compose-test-run@46a8be68cb7d5372fd972661aeab8e9f9c717579
#        uses: cloudposse/github-action-docker-compose-test-run@0.1.3
#        with:
#          # Working directory
#          workdir: # optional, default is ./
#          # Docker compose file
#          file:
#          # Service run tests inside
#          service:
#          # Entrypoint
#          entrypoint: # optional, default is /bin/sh
#          # Command to run tests
#          command:
#          # Docker compose version
#          docker-compose-version: # optional, default is 1.29.2
#          # Docker registry
#          registry:
#          # Docker login
#          login: # optional, default is
#          # Docker password
#          password: # optional, default is