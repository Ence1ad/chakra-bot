version: '3.8'

services:

  db:
    container_name: postgres_db
    image: postgres:15.4
    restart: unless-stopped
    env_file: .env
    healthcheck:
      test: [ "CMD", "pg_isready", "-q", "-d", "${POSTGRES_DB}", "-U", "${POSTGRES_USER}" ]
      timeout: 5s
      interval: 10s
      retries: 5
      start_period: 10s
    command:
      - "postgres"
      - "-c"
      - "shared_preload_libraries=pg_stat_statements"
      - "-c"
      - "pg_stat_statements.max=10000"
      - "-c"
      - "pg_stat_statements.track=all"
    ports:
      - "5432:5432"
    environment:
      - CONFIG_FILE_PATH=/etc/pg_backup.config
    volumes:
      - ./postgres_data:/var/lib/postgresql/data
      - ./pg_backups:/var/backups/
      - ./container_conf/postgres/init-user-db.sh:/docker-entrypoint-initdb.d/init-user-db.sh:ro
      - ./container_conf/postgres/pg_backup.config:/etc/pg_backup.config:ro
      - ./container_conf/postgres/pg_backup_rotated.sh:/usr/bin/pg_backup_rotated.sh:rw
    deploy:
      resources:
        limits:
          cpus: '0.50'
          memory: 4g
        reservations:
          cpus: '0.25'
          memory: 2g
    networks:
      - bot_api
      - monitoring

  redis:
    container_name: redis_db
    image: redis:7.2.1
    healthcheck:
      test: [ "CMD", "redis-cli", "--raw", "incr", "ping" ]
      timeout: 5s
      interval: 10s
      retries: 5
      start_period: 5s
    restart: always
    env_file: .env
    ports:
      - '6379:6379'
    command: redis-server --maxmemory 41943040 --port $REDIS_PORT --save 3600 1 300 100 60 10000 --loglevel warning --requirepass $REDIS_PASSWORD
    volumes:
      - ./redis_data:/data
    deploy:
      resources:
        limits:
          cpus: '0.25'
          memory: 100m
        reservations:
          cpus: '0.1'
          memory: 40m
    networks:
      - monitoring
      - bot_api

  tgbot:
    container_name: tgbot
    build:
      context: .
      dockerfile: Dockerfile
    volumes:
      - ./reports:/usr/src/app/reports
    restart: on-failure
    env_file: .env
    ports:
      - '443:8000'
    networks:
      - bot_api

  prometheus:
    container_name: prometheus
    user: "1000:1000"
    image: prom/prometheus:latest
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
      - '--web.external-url=http://localhost:80/prometheus/'
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus:/etc/prometheus/
      - ./prom_data:/prometheus
    networks:
      - monitoring
    deploy:
      resources:
        limits:
          cpus: '0.5'   # Adjust as needed
          memory: '512M'  # Adjust as needed

  alertmanager:
    container_name: alertmanager
    image: prom/alertmanager
    user: "1000:1000"
    hostname: alertmanager
    restart: unless-stopped
    depends_on:
      - prometheus
    command:
      - --config.file=/etc/alertmanager/alertmanager.yml
      - --storage.path=/alertmanager/data
    ports:
      - "9093:9093"
    volumes:
      - ./prometheus/alertmanager/:/etc/alertmanager/
      - ./alertmanager_data:/alertmanager/
    networks:
      - monitoring

  redis_exporter:
    container_name: redis_exporter
    hostname: redis_exporter
    env_file: .env
    image: oliver006/redis_exporter
    command: [ "--redis.addr", "redis://:${REDIS_PASSWORD}@redis:${REDIS_PORT}/${REDIS_DB}?protocol=3" ]
    ports:
      - "9121:9121"
    restart: unless-stopped
    depends_on:
      - redis
      - prometheus
    networks:
      - monitoring

volumes:
  reports:
    driver: local
  redis_data:
    driver: local
  postgres_data:
    driver: local
  pg_backups:
    driver: local
  prom_data:
    driver: local
  alertmanager_data:
    driver: local


networks:
  bot_api:
    driver: bridge

  monitoring:
    driver: bridge