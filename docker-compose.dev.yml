version: '3.9'

services:

  db:
    container_name: postgres_db
    image: postgres:15.4
    restart: unless-stopped
    env_file: .env
    healthcheck:
      test: [ "CMD", "pg_isready", "-q", "-d", "${POSTGRES_DB}", "-U", "${POSTGRES_USER}" ]
      timeout: 5s
      interval: 10s
      retries: 5
      start_period: 10s
    command:
      - "postgres"
      - "-c"
      - "shared_preload_libraries=pg_stat_statements"
      - "-c"
      - "pg_stat_statements.max=10000"
      - "-c"
      - "pg_stat_statements.track=all"
    ports:
      - "5432:5432"
    environment:
      - CONFIG_FILE_PATH=/etc/pg_backup.config
    volumes:
      - ./postgres_data:/var/lib/postgresql/data
      - ./backups:/var/backups/
      - ./docker/postgres/init-user-db.sh:/docker-entrypoint-initdb.d/init-user-db.sh:ro
      - ./docker/postgres/pg_backup.config:/etc/pg_backup.config:ro
      - ./docker/postgres/pg_backup_rotated.sh:/usr/bin/pg_backup_rotated.sh:rw
    deploy:
      resources:
        limits:
          cpus: '0.50'
          memory: 4g
        reservations:
          cpus: '0.25'
          memory: 2g
    networks:
      - monitoring
      - bot_api

  postgres_exporter:
    container_name: exporter_container
    image: prometheuscommunity/postgres-exporter
    restart: unless-stopped
    hostname: postgres_exporter
    environment:
      DATA_SOURCE_NAME: "postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@${POSTGRES_HOST}:${POSTGRES_PORT}/${POSTGRES_DB}?sslmode=disable"
    ports:
      - "9187:9187"
    depends_on:
      - db
      - prometheus
    deploy:
      resources:
        limits:
          cpus: '0.2'
          memory: 500M
    networks:
      - monitoring
      - bot_api

  redis_exporter:
    container_name: redis_exporter
    image: oliver006/redis_exporter
    command: [ "--redis.addr", "redis://${REDIS_PASSWORD}@redis:${REDIS_PORT}/${REDIS_DB}" ]
    ports:
      - "9121:9121"
    restart: unless-stopped
    hostname: redis_exporter
    depends_on:
      - redis
      - prometheus
    networks:
      - monitoring


  prometheus:
    container_name: prometheus
    image: prom/prometheus:latest
    restart: unless-stopped
    user: root
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus:/etc/prometheus/
      - ./metrics_containers_data/prometheus_data:/prometheus
    networks:
      - monitoring

  grafana:
    container_name: grafana
    image: grafana/grafana
    restart: unless-stopped
    user: root
    ports:
      - "3000:3000"
    volumes:
      - ./metrics_containers_data/grafana/provisioning/:/etc/grafana/provisioning/
      - ./metrics_containers_data/grafana:/var/lib/grafana
    depends_on:
      - prometheus
    networks:
      - monitoring
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:3000/" ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  redis:
    container_name: redis_db
    image: redis:alpine
    healthcheck:
      test: [ "CMD", "redis-cli", "--raw", "incr", "ping" ]
      timeout: 5s
      interval: 10s
      retries: 5
      start_period: 5s
    restart: always
    env_file: .env
    ports:
      - '6379:6379'
    command: redis-server --maxmemory 41943040 --port $REDIS_PORT --save 3600 1 300 100 60 10000 --loglevel warning --requirepass $REDIS_PASSWORD
    volumes:
      - ./redis_data:/data
    networks:
      - monitoring
      - bot_api

  tgbot:
    container_name: tgbot
    build:
      context: .
      dockerfile: Dockerfile
    volumes:
      - ./:/usr/src/app
    restart: on-failure
    env_file: .env
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - bot_api

  alertmanager:
    container_name: alertmanager
    image: prom/alertmanager
    hostname: alertmanager
    user: root
    env_file: .env
    restart: unless-stopped
    depends_on:
      - prometheus
    command:
      - --config.file=/etc/alertmanager/alertmanager.yml
    ports:
      - "9093:9093"
    volumes:
      - ./prometheus/alertmanager/:/etc/alertmanager/
      - ./metrics_containers_data/alertmanager_data:/alertmanager/
    networks:
      - monitoring

  portainer:
    container_name: portainer
    image: portainer/portainer-ce:latest
    restart: unless-stopped
    ports:
      - "9443:9443"
    volumes:
      - ./metrics_containers_data/portainer_data:/data
      - /var/run/docker.sock:/var/run/docker.sock

  node-exporter:
    image: prom/node-exporter:latest
    container_name: node-exporter
    restart: unless-stopped
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    ports:
      - "9100:9100"
    networks:
      - monitoring


volumes:
  metrics_containers_data:
    driver: local
  redis_data:
    driver: local
  postgres_data:
    driver: local
  backups:
    driver: local

networks:
  monitoring:
    driver: bridge

  bot_api:
    driver: bridge
